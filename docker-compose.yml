services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      DATABASE_URL: postgres://user:password@db:5432/mydatabase
      ELASTICSEARCH_HOST: http://elasticsearch:9200
    depends_on:
      # db:
      #   condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ingest.geoip.downloader.enabled=false
      - logger.level=warn  # Set log level to reduce verbosity
      - xpack.security.enabled=false  # Disable security features for simplicity
      - xpack.security.http.ssl.enabled=false  # Disable HTTPS
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U user -d mydatabase || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
    driver: local